plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
}

ext {
	domaVersion = '2.24.0'
	lombokVersion = '1.18.6'
}

/*
 * Doma-Gen settings
 */
def dbUrl = 'jdbc:postgresql://127.0.0.1:5432/testdb'
def dbUser = 'db_user'
def dbPassword = 'abcd1234'
def basePackage = 'com.example.springbootboilerplate'

configurations {
    domaGenRuntime
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	
	// Doma
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.1.1'
    implementation "org.seasar.doma:doma:${domaVersion}"
	annotationProcessor "org.seasar.doma:doma:${domaVersion}"
	
	// Doma-Gen
	domaGenRuntime "org.seasar.doma:doma-gen:${domaVersion}"
    domaGenRuntime 'org.postgresql:postgresql'
}

task copyDomaResources(type: Sync) doLast {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}

task domaGen {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
        	url: "${dbUrl}",
			user: "${dbUser}",
			password: "${dbPassword}",
			versionColumnNamePattern: 'version',
			templatePrimaryDir: 'doma-template'
        ) {
	        entityConfig(
				packageName: "${basePackage}.entity",
				overwrite: true,
				overwriteListener: true
			)
	        daoConfig(
				packageName: "${basePackage}.dao",
				overwrite: true,
			)
	        sqlConfig(
				overwrite: true,
			)
        }
    }
}

task domaGenTestCases {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
        	url: "${dbUrl}",
			user: "${dbUser}",
			password: "${dbPassword}",
        ) {
            sqlTestCaseConfig {
                fileset(dir: 'src/main/resources') {
                    include(name: 'META-INF/**/*.sql')
                }
            }
        }
    }
}

compileJava {
    dependsOn copyDomaResources
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-proc:none']
}
